// Generated by CoffeeScript 1.9.3
(function() {
  define(function(require, module, exports) {
    var colorGenerator, defaults, utils;
    utils = require('./d3utils');
    defaults = {
      width: 200,
      height: 10,
      maxX: null,
      colors: null,
      fontSize: 16,
      lineHeight: 1.2,
      onmouseover: null,
      onmouseleave: null,
      transition: 500
    };
    colorGenerator = function(colors) {
      var index, isArray;
      index = -1;
      isArray = Array.isArray(colors);
      return function() {
        index = index + 1;
        if (isArray) {
          return colors[index = index % colors.length];
        } else {
          return colors(index);
        }
      };
    };
    return function(array, options) {
      var clipper, clipperId, clipper_rect, data, getColor, halfHeight, id, lines, shadowId, sum, sumX, svg, wrap, x;
      options = _.extend({}, defaults, options);
      if (!options.colors) {
        options.colors = d3.scale.category10();
      }
      getColor = colorGenerator(options.colors);
      halfHeight = options.height / 2;
      id = utils.getId();
      clipperId = "d3bar-clipper-" + id;
      shadowId = "d3chart-shadow-" + id;
      sum = d3.sum(array);
      if (options.maxX == null) {
        options.maxX = sum;
      }
      x = d3.scale.linear().domain([0, options.maxX]).range([0, options.width]);
      data = _.reduce(array, function(obj, d, i) {
        var r;
        r = {
          value: d,
          index: i,
          x: obj.lastWidth,
          dx: x(d)
        };
        obj.list.push(r);
        obj.lastWidth += r.dx;
        return obj;
      }, {
        list: [],
        lastWidth: 0
      }).list;
      sumX = x(sum);
      svg = utils.newSVG().attr({
        'class': 'd3bar',
        width: options.width,
        height: options.height
      });
      utils.addShadowFilter(svg, shadowId);
      clipper = utils.addClipPath(svg, clipperId);
      clipper_rect = clipper.append('rect').attr({
        x: 0,
        y: 0,
        width: 0,
        height: options.height,
        rx: halfHeight,
        ry: halfHeight
      });
      if (options.transition) {
        clipper_rect = clipper_rect.transition().duration(options.transition);
      }
      clipper_rect.attr('width', sumX);
      wrap = svg.append('g').attr('clip-path', "url(#" + clipperId + ")");
      lines = wrap.selectAll('line').data(data).enter().append('line').attr({
        'class': 'd3bar-line',
        stroke: function() {
          return getColor();
        },
        'stroke-width': options.height,
        x1: 0,
        x2: 0,
        y1: halfHeight,
        y2: halfHeight
      }).on('mouseover', function() {
        var d, line;
        line = d3.select(this);
        d = line.data()[0];
        return typeof options.onmouseover === "function" ? options.onmouseover(d3.event, d) : void 0;
      });
      if (options.transition) {
        lines = lines.transition().duration(options.transition);
      }
      lines.attr({
        x1: function(d) {
          return d.x;
        },
        x2: function(d) {
          return d.x + d.dx;
        }
      });
      wrap.on('mouseleave', function() {
        return typeof options.onmouseleave === "function" ? options.onmouseleave(d3.event) : void 0;
      });
      return svg[0][0];
    };
  });

}).call(this);
