// Generated by CoffeeScript 1.9.3
(function() {
  define(function(require, module, exports) {
    var colorGenerator, defaults, utils;
    utils = require('./d3utils');
    defaults = {
      width: 200,
      height: 40,
      maxX: null,
      strokeWidth: 10,
      colors: null,
      getText: null,
      rectWidth: 40,
      fontSize: 16,
      lineHeight: 1.2
    };
    colorGenerator = function(colors) {
      var index, isArray;
      index = -1;
      isArray = Array.isArray(colors);
      return function() {
        index = index + 1;
        if (isArray) {
          return colors[index = index % colors.length];
        } else {
          return colors(index);
        }
      };
    };
    return function(array, options) {
      var clipper, clipperId, data, getColor, halfHeight, id, shadowId, showText, sum, sumX, svg, tips, x;
      options = _.extend({}, defaults, options);
      if (!options.colors) {
        options.colors = d3.scale.category10();
      }
      getColor = colorGenerator(options.colors);
      halfHeight = options.strokeWidth / 2;
      id = utils.getId();
      clipperId = "d3bar-clipper-" + id;
      shadowId = "d3chart-shadow-" + id;
      sum = d3.sum(array);
      if (options.maxX == null) {
        options.maxX = sum;
      }
      x = d3.scale.linear().domain([0, options.maxX]).range([0, options.width]);
      data = _.reduce(array, function(obj, d, i) {
        var r;
        r = {
          value: d,
          index: i,
          x: obj.lastWidth,
          dx: x(d)
        };
        obj.list.push(r);
        obj.lastWidth += r.dx;
        return obj;
      }, {
        list: [],
        lastWidth: 0
      }).list;
      sumX = x(sum);
      svg = utils.newSVG().attr({
        'class': 'd3bar',
        width: options.width,
        height: options.height
      });
      utils.addShadowFilter(svg, shadowId);
      clipper = utils.addClipPath(svg, clipperId);
      clipper.append('rect').attr({
        x: 0,
        y: 0,
        width: sumX,
        height: options.strokeWidth,
        rx: halfHeight,
        ry: halfHeight
      });
      tips = {
        wrap: svg.append('g').attr('class', 'd3bar-text'),
        show: function() {
          if (!this.hidden) {
            return;
          }
          this.hidden = false;
          return this.wrap.style('display', 'block');
        },
        hide: function() {
          if (this.hidden) {
            return;
          }
          this.hidden = true;
          return this.wrap.style('display', 'none');
        }
      };
      tips.rect = tips.wrap.append('rect').style('filter', "url(#" + shadowId + ")").attr({
        width: options.rectWidth,
        rx: 5,
        ry: 5
      });
      tips.hide();
      showText = function(d) {
        var text, th, tx, ty, wrap;
        text = (typeof options.getText === "function" ? options.getText(d) : void 0) || [d.value];
        th = options.fontSize * (options.lineHeight * (text.length + 1) - 1);
        tips.rect.attr('height', th);
        ty = options.height - options.strokeWidth - th - 5;
        tx = utils.ensureRange(d.x, 5, options.width - options.rectWidth - 5);
        wrap = tips.wrap;
        wrap.style('transform', "translate(" + tx + "px," + ty + "px)");
        wrap.selectAll('text').remove();
        return wrap.selectAll('text').data(text).enter().append('text').attr({
          'text-anchor': 'middle',
          x: options.rectWidth / 2,
          y: function(d, i) {
            return options.fontSize * options.lineHeight * (i + 1);
          },
          'font-size': options.fontSize
        }).text(function(d) {
          return d;
        });
      };
      svg.append('g').attr('clip-path', "url(#" + clipperId + ")").style('transform', "translate(0," + (options.height - options.strokeWidth) + "px)").selectAll('line').data(data).enter().append('line').attr({
        'class': 'd3bar-line',
        stroke: function() {
          return getColor();
        },
        'stroke-width': options.strokeWidth,
        x1: 0,
        y1: 0,
        x2: function(d) {
          return d.dx;
        },
        y2: 0,
        transform: function(d, i) {
          var currentX;
          currentX = "translate(" + d.x + "," + halfHeight + ")";
          return currentX;
        }
      }).on('mouseover', function() {
        var d, line;
        line = d3.select(this);
        d = line.data()[0];
        showText(d);
        return tips.show();
      }).on('mouseleave', function() {
        return tips.hide();
      });
      return svg[0][0];
    };
  });

}).call(this);
